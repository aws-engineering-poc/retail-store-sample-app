---
apiVersion: dynamodb.aws.upbound.io/v1beta1
kind: Table
metadata:
  name: "demo-stage-carts-dynamodb"
  labels:
    testing.upbound.io/example-name: dynamodb
  annotations:
    crossplane.io/external-name: "demo-stage-carts-dynamodb"
spec:
  forProvider:
    attribute:
      - name: id
        type: S
      - name: customerId
        type: S
    hashKey: id
    billingMode: PAY_PER_REQUEST
    globalSecondaryIndex:
      - hashKey: customerId
        name: idx_global_customerId
        projectionType: ALL
    region: 'us-west-2'
    tags:
      namespace: carts
  providerConfigRef:
    name: dynamodb
---
# Source: carts/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-0.0.1
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: carts-crossplane
data:
  CARTS_DYNAMODB_TABLENAME: "demo-stage-carts-dynamodb"
---
# Source: carts/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-0.0.1
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
# ---
# Source: carts/templates/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    helm.sh/chart: carts-0.0.1
    app.kubernetes.io/name: carts
    app.kubernetes.io/instance: carts
    app.kubernetes.io/component: service
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: carts
      app.kubernetes.io/instance: carts
      app.kubernetes.io/component: service
      app.kuberneres.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: carts
        app.kubernetes.io/instance: carts
        app.kubernetes.io/component: service
        app.kuberneres.io/owner: retail-store-sample
    spec:
      serviceAccountName: carts-crossplane
      securityContext:
        fsGroup: 1000
      containers:
        - name: carts
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - configMapRef:
                name: carts-crossplane
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-cart:0.5.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 3
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory    